name: Build and Deploy

on:
  push:
    tags: ["v[0-9].[0-9]+.[0-9]+"]
    branches:
      - "development"
      - "staging"
      - "main"

env:
  HCP_CLIENT_ID: ${{ secrets.HCP_CLIENT_ID }}
  HCP_CLIENT_SECRET: ${{ secrets.HCP_CLIENT_SECRET }}
  HCP_PROJECT_ID: ${{ secrets.HCP_PROJECT_ID }}
  HCP_ORGANIZATION_ID: ${{ secrets.HCP_ORGANIZATION_ID }}
  HCP_BUCKET_NAME: "learn-packer-github-actions"

jobs:
  build-image:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      iteration_id: ${{ steps.hcp.outputs.iteration_id }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1

      - name: Packer Init
        run: packer init .

      - name: Packer Build - Branches
        if: "startsWith(github.ref, 'refs/heads/')"
        run: packer build .

      - name: Packer Build - Tags
        if: startsWith(github.ref, 'refs/tags/v')
        run: HCP_PACKER_BUILD_FINGERPRINT=$(date +'%m%d%YT%H%M%S') packer build .

      - name: Get HCP Packer Iteration ID from Packer Manifest
        id: hcp
        run: |
          last_run_uuid=$(jq -r '.last_run_uuid' "./packer_manifest.json")
          build=$(jq -r '.builds[] | select(.packer_run_uuid == "'"$last_run_uuid"'")' "./packer_manifest.json")
          iteration_id=$(echo "$build" | jq -r '.custom_data.iteration_id')
          echo "::set-output name=iteration_id::$iteration_id"
  
  upload-ali:
    name: Build and upload to alicloud
    runs-on: macOS-10.15
    outputs:
      iteration_id: ${{ steps.hcp.outputs.iteration_id }}
    env:
      AccessKeyId: ${{ secrets.ALI_ACCESS_KEY_ID_CORP }}
      AccessKeySecret: ${{ secrets.ALI_ACCESS_KEY_SECRET_CORP }}
      REGION_ID: cn-hangzhou
      REGISTRY: registry.us-east-1.aliyuncs.com
      NAMESPACE: namespace
      IMAGE: repo
      TAG: ${{ github.sha }}
      ACK_CLUSTER_ID: clusterID
      ACK_DEPLOYMENT_NAME: nginx-deployment

      ACR_EE_INSTANCE_ID: instanceID
      ACR_EE_NAMESPACE: namespace
      ACR_EE_IMAGE: repo
      ACR_EE_TAG: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v3
        with:
          path: ${{github.workspace}}
          # fetch-depth: 0 is needed to fetch history/tags, which are used to identify the build
          fetch-depth: 0

      - name: Install Ali CLI
        run: brew install aliyun-cli

      # 1.1 Login to ACR   
      - name: Login to ACR with the AccessKey pair
        uses: aliyun/acr-login@v1
        with:
          region-id: "${{ env.REGION_ID }}"
          access-key-id: "${{ secrets.ACCESS_KEY_ID }}"
          access-key-secret: "${{ secrets.ACCESS_KEY_SECRET }}"

      # 1.2 Buid and push image to ACR   
      - name: Build and push image to ACR  
        run: |
          brew install kubectl docker coreutils
          docker build --tag "$REGISTRY/$NAMESPACE/$IMAGE:$TAG" .  
          docker push "$REGISTRY/$NAMESPACE/$IMAGE:$TAG"   
  
      # 1.3 Scan image in ACR   
      - name: Scan image in ACR
        uses: aliyun/acr-scan@v1
        with:
          region-id: "${{ env.REGION_ID }}"
          access-key-id: "${{ secrets.ACCESS_KEY_ID }}"
          access-key-secret: "${{ secrets.ACCESS_KEY_SECRET }}"
          repository: "${{ env.NAMESPACE }}/${{ env.IMAGE }}"
          tag: "${{ env.TAG }}"

      # 2.1 (Optional) Login to ACR EE          
      - uses: actions/checkout@v2
      - name: Login to ACR EE with the AccessKey pair
        uses: aliyun/acr-login@v1
        with:
          login-server: "https://${{ env.ACR_EE_REGISTRY }}"
          region-id: "${{ env.REGION_ID }}"
          access-key-id: "${{ secrets.ACCESS_KEY_ID }}"
          access-key-secret: "${{ secrets.ACCESS_KEY_SECRET }}"
          instance-id: "${{ env.ACR_EE_INSTANCE_ID }}"

      # 2.2 (Optional) Build and push image ACR EE          
      - name: Build and push image to ACR EE  
        run: |
          docker build -t "$ACR_EE_REGISTRY/$ACR_EE_NAMESPACE/$ACR_EE_IMAGE:$TAG" .
          docker push "$ACR_EE_REGISTRY/$ACR_EE_NAMESPACE/$ACR_EE_IMAGE:$TAG"
      # 2.3 (Optional) Scan image in ACR EE          
      - name: Scan image in ACR EE
        uses: aliyun/acr-scan@v1
        with:
          region-id: "${{ env.REGION_ID }}"
          access-key-id: "${{ secrets.ACCESS_KEY_ID }}"
          access-key-secret: "${{ secrets.ACCESS_KEY_SECRET }}"
          instance-id: "${{ env.ACR_EE_INSTANCE_ID }}"
          repository: "${{ env.ACR_EE_NAMESPACE}}/${{ env.ACR_EE_IMAGE }}"
          tag: "${{ env.ACR_EE_TAG }}"

      # 3.1 Set ACK context         
      - name: Set K8s context
        uses: aliyun/ack-set-context@v1
        with:
          access-key-id: "${{ secrets.ACCESS_KEY_ID }}"
          access-key-secret: "${{ secrets.ACCESS_KEY_SECRET }}"
          cluster-id: "${{ env.ACK_CLUSTER_ID }}"

      # 3.2 Deploy the image to the ACK cluster
      - name: Set up Kustomize
        run: |-
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash /dev/stdin 3.8.6
      - name: Deploy
        run: |-
          ./kustomize edit set image REGISTRY/NAMESPACE/IMAGE:TAG=$REGISTRY/$NAMESPACE/$IMAGE:$TAG
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/$ACK_DEPLOYMENT_NAME
          kubectl get services -o wide
          - name: Alibaba Cloud Container Registry (ACR) Image Scan
  
  update-hcp-packer-channel:
    name: Update HCP Packer channel
    needs: ["build-image"]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Create and set channel
        working-directory: .github/scripts
        run: |
          channel_name=$( echo ${{github.ref_name}} | sed 's/\./-/g')
          ./create_channel_iteration.sh $HCP_BUCKET_NAME $channel_name "${{ needs.build-image.outputs.iteration_id }}"
